package edu.pjwstk.mas_project_vovkotrub_yaroslav_s18461.gui.view;

import lombok.Data;
import org.springframework.stereotype.Component;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

@Data
@Component
public class MainMenu extends JFrame {
    private JPanel panel;
    private JButton salonsButton;
    private JButton allVehicleButton;
    private JButton exitButton;
    private JLabel label;

    public MainMenu() {
        setTitle("AutoInfo");
        setContentPane(panel);
        setSize(700, 535);
        setLocationRelativeTo(null);
        setResizable(false);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridBagLayout());
        panel.setAutoscrolls(false);
        panel.setBackground(new Color(-1052689));
        panel.setFocusCycleRoot(false);
        Font panelFont = this.$$$getFont$$$(null, -1, -1, panel.getFont());
        if (panelFont != null) panel.setFont(panelFont);
        panel.setForeground(new Color(-1052689));
        panel.setMaximumSize(new Dimension(700, 520));
        panel.setMinimumSize(new Dimension(700, 520));
        panel.setOpaque(true);
        panel.setPreferredSize(new Dimension(700, 520));
        panel.setRequestFocusEnabled(false);
        panel.setVerifyInputWhenFocusTarget(true);
        panel.setVisible(true);
        label = new JLabel();
        label.setAutoscrolls(false);
        label.setDoubleBuffered(false);
        label.setFocusCycleRoot(false);
        label.setFocusTraversalPolicyProvider(false);
        Font labelFont = this.$$$getFont$$$("Magneto", -1, 48, label.getFont());
        if (labelFont != null) label.setFont(labelFont);
        label.setForeground(new Color(-14013910));
        label.setHorizontalAlignment(0);
        label.setHorizontalTextPosition(0);
        label.setMinimumSize(new Dimension(196, 60));
        label.setOpaque(false);
        label.setPreferredSize(new Dimension(300, 60));
        label.setText("AutoInfo");
        label.setVerticalAlignment(0);
        label.setVisible(true);
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.insets = new Insets(0, 0, 30, 0);
        panel.add(label, gbc);
        salonsButton = new JButton();
        salonsButton.setBackground(new Color(-16728833));
        salonsButton.setBorderPainted(true);
        salonsButton.setContentAreaFilled(true);
        salonsButton.setDefaultCapable(true);
        salonsButton.setDoubleBuffered(false);
        salonsButton.setEnabled(true);
        salonsButton.setFocusCycleRoot(false);
        salonsButton.setFocusPainted(true);
        salonsButton.setFocusTraversalPolicyProvider(false);
        salonsButton.setFocusable(true);
        Font salonsButtonFont = this.$$$getFont$$$("Century Gothic", Font.BOLD, 20, salonsButton.getFont());
        if (salonsButtonFont != null) salonsButton.setFont(salonsButtonFont);
        salonsButton.setForeground(new Color(-1));
        salonsButton.setHideActionText(false);
        salonsButton.setHorizontalTextPosition(0);
        salonsButton.setInheritsPopupMenu(false);
        salonsButton.setMargin(new Insets(0, 0, 0, 0));
        salonsButton.setMinimumSize(new Dimension(195, 50));
        salonsButton.setPreferredSize(new Dimension(195, 60));
        salonsButton.setSelected(false);
        salonsButton.setText("List salons");
        salonsButton.setVisible(true);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.insets = new Insets(0, 0, 15, 0);
        panel.add(salonsButton, gbc);
        allVehicleButton = new JButton();
        allVehicleButton.setBackground(new Color(-16728833));
        Font allVehicleButtonFont = this.$$$getFont$$$("Century Gothic", Font.BOLD, 20, allVehicleButton.getFont());
        if (allVehicleButtonFont != null) allVehicleButton.setFont(allVehicleButtonFont);
        allVehicleButton.setForeground(new Color(-1));
        allVehicleButton.setLabel("List all vehicles");
        allVehicleButton.setPreferredSize(new Dimension(195, 60));
        allVehicleButton.setText("List all vehicles");
        allVehicleButton.setVerticalAlignment(0);
        allVehicleButton.setVerticalTextPosition(0);
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.weightx = 1.0;
        gbc.insets = new Insets(0, 0, 15, 0);
        panel.add(allVehicleButton, gbc);
        exitButton = new JButton();
        exitButton.setBackground(new Color(-16728833));
        Font exitButtonFont = this.$$$getFont$$$("Century Gothic", Font.BOLD, 20, exitButton.getFont());
        if (exitButtonFont != null) exitButton.setFont(exitButtonFont);
        exitButton.setForeground(new Color(-1));
        exitButton.setPreferredSize(new Dimension(195, 60));
        exitButton.setText("Exit");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 3;
        gbc.weightx = 1.0;
        panel.add(exitButton, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

}
