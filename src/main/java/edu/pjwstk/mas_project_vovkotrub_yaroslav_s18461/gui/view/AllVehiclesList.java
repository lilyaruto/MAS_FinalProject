package edu.pjwstk.mas_project_vovkotrub_yaroslav_s18461.gui.view;

import edu.pjwstk.mas_project_vovkotrub_yaroslav_s18461.model.Vehicle;
import lombok.Data;
import org.springframework.stereotype.Controller;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.Locale;

/**
 * Class representing configuration for all vehicles list panel
 */
@Controller
@Data
public class AllVehiclesList {
    private JButton mainMenuButton;
    private JScrollPane allVehiclesPane;
    private JList<Vehicle> allVehiclesList;
    private JPanel panel;

    private DefaultListModel<Vehicle> allVehicleListModel;

    private void createUIComponents() {
        allVehicleListModel = new DefaultListModel<>();
        allVehiclesList = new JList<>(allVehicleListModel);
        allVehiclesList.setCellRenderer(new AllVehicleListCellRender());
    }

    private class AllVehicleListCellRender extends JLabel implements ListCellRenderer<Vehicle> {

        public AllVehicleListCellRender() {
            setOpaque(true);
        }

        @Override
        public Component getListCellRendererComponent(JList<? extends Vehicle> jList, Vehicle vehicle, int i, boolean b, boolean b1) {
            setText(vehicle.getManufacturer().getName() + " " + vehicle.getModelName());
            setFont(new Font("Century Gothic", Font.BOLD, 18));
            if (b) {
                setBackground(jList.getSelectionBackground());
                setForeground(jList.getSelectionForeground());
            } else {
                setBackground(jList.getBackground());
                setForeground(jList.getForeground());
            }
            return this;
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        panel = new JPanel();
        panel.setLayout(new GridBagLayout());
        panel.setMaximumSize(new Dimension(700, 520));
        panel.setMinimumSize(new Dimension(700, 520));
        panel.setPreferredSize(new Dimension(700, 520));
        allVehiclesPane = new JScrollPane();
        allVehiclesPane.setMaximumSize(new Dimension(400, 600));
        allVehiclesPane.setMinimumSize(new Dimension(400, 600));
        allVehiclesPane.setPreferredSize(new Dimension(400, 600));
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.insets = new Insets(15, 0, 0, 0);
        panel.add(allVehiclesPane, gbc);
        allVehiclesList.setMaximumSize(new Dimension(400, 600));
        allVehiclesList.setMinimumSize(new Dimension(400, 600));
        allVehiclesList.setPreferredSize(new Dimension(400, 600));
        allVehiclesPane.setViewportView(allVehiclesList);
        mainMenuButton = new JButton();
        mainMenuButton.setBackground(new Color(-16728833));
        Font mainMenuButtonFont = this.$$$getFont$$$("Century Gothic", Font.BOLD, 20, mainMenuButton.getFont());
        if (mainMenuButtonFont != null) mainMenuButton.setFont(mainMenuButtonFont);
        mainMenuButton.setForeground(new Color(-1));
        mainMenuButton.setMaximumSize(new Dimension(196, 60));
        mainMenuButton.setMinimumSize(new Dimension(196, 60));
        mainMenuButton.setPreferredSize(new Dimension(196, 60));
        mainMenuButton.setText("Main menu");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.insets = new Insets(15, 0, 15, 0);
        panel.add(mainMenuButton, gbc);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

}
